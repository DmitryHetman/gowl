diff --git a/display.go b/display.go
index 1b7f401..ef24c49 100644
--- a/display.go
+++ b/display.go
@@ -60,12 +60,12 @@ func display_error(d *Display, msg []byte) {
 	if err != nil {
 		// XXX Error handling
 	}
-	object_id := new(Object)
+//	object_id := new(Object)
 	object_idobj := getObject(object_idid)
 	if object_idobj == nil {
 		return
 	}
-	object_id = object_idobj.(Object)
+	object_id := object_idobj.(Object)
 	data.Object_id = object_id
 
 	code,err := readUint32(buf)
@@ -172,6 +172,23 @@ func display_delete_id(d *Display, msg []byte) {
 	printEvent("display", "delete_id", id)
 }
 
+func (d *Display) Iterate() {
+	for {
+		id, opcode, _, msg, remain, err := getmsg()
+		if err != nil {
+			return
+		}
+		obj := getObject(id)
+		if obj != nil {
+			obj.HandleEvent(opcode, msg)
+		}
+
+		if remain == 0 {
+			break
+		}
+	}
+}
+
 func NewDisplay() (d *Display) {
 	d = new(Display)
 	d.listeners = make(map[int16][]chan interface{}, 0)
@@ -180,6 +197,16 @@ func NewDisplay() (d *Display) {
 	d.events = append(d.events, display_global)
 	d.events = append(d.events, display_global_remove)
 	d.events = append(d.events, display_delete_id)
+
+	connect_to_socket()
+	appendObject(d)
+
+	delchan := make(chan interface{})
+	d.AddDeleteIdListener(delchan)
+	errchan := make(chan interface{})
+	d.AddErrorListener(errchan)
+	go delete_id_listener(delchan)
+	go error_listener(errchan)
 	return
 }
 
